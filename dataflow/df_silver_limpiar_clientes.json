{
	"name": "df_silver_limpiar_clientes",
	"properties": {
		"folder": {
			"name": "SILVER"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_tabla_clientes",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "ds_silver_bd",
						"type": "DatasetReference"
					},
					"name": "source2"
				},
				{
					"dataset": {
						"referenceName": "ds_silver_location",
						"type": "DatasetReference"
					},
					"name": "source3"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_silver_clientes",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "cast1"
				},
				{
					"name": "lookup1"
				},
				{
					"name": "lookup2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          cst_id as string,",
				"          cst_key as string,",
				"          cst_firstname as string,",
				"          cst_lastname as string,",
				"          cst_marital_status as string,",
				"          cst_gndr as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source1",
				"source(output(",
				"          CID as string,",
				"          BDATE as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source2",
				"source(output(",
				"          cid as string,",
				"          cntry as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source3",
				"lookup2 derive(cst_key = trim(cst_key),",
				"          cst_firstname = trim(cst_firstname),",
				"          cst_lastname = trim(cst_lastname),",
				"          cst_marital_status = trim(cst_marital_status),",
				"          cst_gndr = trim(cst_gndr)) ~> derivedColumn1",
				"derivedColumn1 cast(output(",
				"          cst_id as integer",
				"     ),",
				"     errors: true) ~> cast1",
				"source1, source2 lookup(cst_key == CID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup1",
				"lookup1, source3 lookup(cst_key == source3@cid,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup2",
				"cast1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          cst_id as integer,",
				"          BDATE as date,",
				"          cntry as string,",
				"          cst_firstname as string,",
				"          cst_lastname as string,",
				"          cst_marital_status as string,",
				"          cst_gndr as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          cst_id,",
				"          BDATE,",
				"          cntry,",
				"          cst_firstname,",
				"          cst_lastname,",
				"          cst_marital_status,",
				"          cst_gndr",
				"     )) ~> sink1"
			]
		}
	}
}